from base import es_append_cve_by_query
from base import es_get_ips_by_query
from base import exists_es_index
from base import ask_continue
import argparse
import requests
import sys
import re

parser = argparse.ArgumentParser()
parser.add_argument('index', help='The ES index.')
parser.add_argument('query', help='The ES query. The query should be enclosed with double quotes. Using '
                                  'double quotes withing the ES query itself should be escaped with a backslash')
parser.add_argument('cve', help='The CVE that should be added to all query matches')
parser.add_argument("-y", "--yes", "--assume-yes", help="Automatic yes to prompts; assume \"yes\" as answer to all "
                                                        "prompts and run non-interactively. Will also add CVE even if"
                                                        "it doesn't exist in MITRE", action="store_true")


def get_mitre_url(cve_to_check):
    """Checks if CVE exists at MITRE and returns MITRE url"""
    url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve_to_check
    check = requests.get(url)
    regex = re.compile('<title>(.*?)</title>', re.IGNORECASE | re.DOTALL)
    mitre_response_title = regex.search(check.text).group(1)
    if "ERROR: Couldn't find" in mitre_response_title:
        print("Error in cve.mitre.org response:\n" + mitre_response_title)
        if not args.yes:
            ask_continue()
        else:
            print("Ignore non-existent CVE since flag -y is set.")
    return url

# CHECK ARGS
args = parser.parse_args()
index = args.index
query = args.query
cve = args.cve
pattern = re.compile('^CVE-\d{4}-\d{4,7}', re.IGNORECASE)
if not re.fullmatch(pattern, cve):
    msg = "{0} is not a valid CVE.".format(cve)
    raise argparse.ArgumentTypeError(msg)
if not exists_es_index(index):
    msg = "{0} is not an existing Elasticsearch index".format(index)
    raise argparse.ArgumentTypeError(msg)
mitre_url = get_mitre_url(cve)

# ACTION
list_of_ips = es_get_ips_by_query(index, query)
if len(list_of_ips) < 1:
    print("Query matches zero IPs. Exiting now.")
    sys.exit(0)

if not args.yes:
    ask_continue()
es_append_cve_by_query(index, query, cve)
print("Added " + cve + " to " + str(len(list_of_ips)) + " IPs in index \"" + index + "\"")

